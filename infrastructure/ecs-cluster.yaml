---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String

    ECSAMI:
        Description: The AMI ID of the ECS optimised Amazon Linux AMI
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
        Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

    MinSize:
        Description: How many ECS hosts do you want as a minimum?
        Type: Number

    MaxSize:
        Description: How many ECS hosts do you want as a maximum?
        Type: Number

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    KeyPair:
        Description: Select the Key Pair to use for the ECS cluster hosts
        Type: AWS::EC2::KeyPair::KeyName

    EFSFileSystem:
        Description: The export name of the EFS filesystem to use
        Type: String

    EFSSecurityGroup:
        Description: The export name of the EFS Mount Target Security Group
        Type: String

    EIPAllocation:
        Description: The eipalloc of the EIP to attach
        Type: String

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref MinSize
            MaxSize: !Ref MaxSize
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
                - Key: spot-enabled
                  Value: true
                  PropagateAtLaunch: false
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: !Ref MinSize
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true

    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !Ref ECSAMI
            InstanceType: !Ref InstanceType
            KeyName: !Ref KeyPair
            AssociatePublicIpAddress: true
            SecurityGroups:
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            UserData:
                Fn::Base64:
                  Fn::Sub:
                    - |
                      #!/bin/bash
                      set -euxo pipefail
                      yum update -y
                      yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                      yum install -y aws-cfn-bootstrap amazon-efs-utils jq yum-utils

                      set +e
                      needs-restarting -r
                      if [[ ${!?} -ne 0 ]]; then
                          rm /var/lib/cloud/instance/sem/config_scripts_user
                          shutdown -r now
                      fi
                      set -e

                      /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                      mkdir /mail-efs
                      mount -t efs ${EFSID}:/ /mail-efs

                      set +e
                      /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

                      /usr/local/sbin/attach_ip.sh && \
                      nohup /usr/local/sbin/label_ecs.sh > /tmp/label_ecs.log &
                    - EFSID:
                        Fn::ImportValue: !Ref EFSFileSystem

        Metadata:
            AWS::CloudFormation::Init:
                config:
                    packages:
                        yum:
                            awslogs: []

                    commands:
                        01_add_instance_to_cluster:
                            command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                    files:
                        "/usr/local/sbin/attach_ip.sh":
                            mode: 000500
                            owner: root
                            group: root
                            content: !Sub |
                                #!/bin/bash -e

                                set -uo pipefail

                                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                                echo "INFO: I am EC2 instance, with ID ${!INSTANCE_ID}"

                                SUCCESS="no"
                                for i in {1..40}; do
                                    EIP=$(aws ec2 --region ${AWS::Region} describe-addresses --allocation-ids ${EIPAllocation})

                                    if [[ $(echo ${!EIP} | grep AssociationId) == "" ]]; then
                                        # IP isn't associated ... grab the IP
                                        echo "INFO: The EIP isn't associated, I'm going to associate with it"
                                        aws ec2 --region ${AWS::Region} associate-address \
                                            --allocation-id ${EIPAllocation} \
                                            --instance-id ${!INSTANCE_ID} \
                                            --no-allow-reassociation
                                    else
                                        # the IP is allocated, is it this machine?
                                        if [[ $(echo ${!EIP} | grep ${!INSTANCE_ID}) != "" ]] ; then
                                            echo "INFO: I got the EIP, I now have $(echo ${!EIP} | jq .Addresses | grep PublicIp)"
                                            SUCCESS="yes"
                                            break
                                        else
                                            echo "WARNING: Some other EC2 has the EIP, waiting to try again"
                                            sleep 30
                                        fi
                                    fi
                                done

                                if [[ ${!SUCCESS} != "yes" ]]; then
                                    # terminal condition
                                    echo "FATAL: I didn't end up with the EIP, terminating myself"
                                    aws ec2 --region ${AWS::Region} terminate-instances \
                                        --instance-ids ${!INSTANCE_ID}
                                    exit 1
                                fi

                        "/usr/local/sbin/label_ecs.sh":
                            mode: 000500
                            owner: root
                            group: root
                            content: !Sub |
                                #!/bin/bash -e

                                set -uo pipefail

                                for i in {1..10}; do
                                    set +e
                                    ECSID=$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn)
                                    set -e

                                    if [[ ${!ECSID} == '' ]]; then
                                        # wait a little longer for the local ecs-agent container
                                        echo -n "."
                                        sleep 10
                                    else
                                        echo ""
                                        break
                                    fi
                                done

                                aws ecs --region ${AWS::Region} put-attributes \
                                    --attributes name=hasPublicIp,value=yes,targetId=${!ECSID} \
                                    --cluster ${ECSCluster}

                        "/etc/cron.weekly/terminate_myself":
                            mode: 000500
                            owner: root
                            group: root
                            content: !Sub |
                                #!/bin/bash -e

                                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

                                aws ec2 --region ${AWS::Region} terminate-instances \
                                    --instance-ids ${!INSTANCE_ID}

                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}

                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                        "/etc/awslogs/awscli.conf":
                            content: !Sub |
                                [plugins]
                                cwlogs = cwlogs
                                [default]
                                region = ${AWS::Region}

                        "/etc/awslogs/awslogs.conf":
                            content: !Sub |
                                [general]
                                state_file = /var/lib/awslogs/agent-state

                                [/var/log/dmesg]
                                file = /var/log/dmesg
                                log_group_name = ${ECSCluster}-/var/log/dmesg
                                log_stream_name = ${ECSCluster}

                                [/var/log/messages]
                                file = /var/log/messages
                                log_group_name = ${ECSCluster}-/var/log/messages
                                log_stream_name = ${ECSCluster}
                                datetime_format = %b %d %H:%M:%S

                                [/var/log/cloud-init-output.log]
                                file = /var/log/cloud-init-output.log
                                log_group_name = ${ECSCluster}-/var/log/cloud-init-output.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ

                                [/var/log/docker]
                                file = /var/log/docker
                                log_group_name = ${ECSCluster}-/var/log/docker
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                                [/var/log/ecs/ecs-init.log]
                                file = /var/log/ecs/ecs-init.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ

                                [/var/log/ecs/ecs-agent.log]
                                file = /var/log/ecs/ecs-agent.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ

                                [/var/log/ecs/audit.log]
                                file = /var/log/ecs/audit.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/audit.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ

                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                            awslogs:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/awslogs/awslogs.conf
                                    - /etc/awslogs/awscli.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:PutAttributes",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "ssm:DescribeAssociation",
                                "ssm:GetDeployablePatchSnapshotForInstance",
                                "ssm:GetDocument",
                                "ssm:GetManifest",
                                "ssm:GetParameters",
                                "ssm:ListAssociations",
                                "ssm:ListInstanceAssociations",
                                "ssm:PutInventory",
                                "ssm:PutComplianceItems",
                                "ssm:PutConfigurePackageResult",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation",
                                "ec2messages:AcknowledgeMessage",
                                "ec2messages:DeleteMessage",
                                "ec2messages:FailMessage",
                                "ec2messages:GetEndpoint",
                                "ec2messages:GetMessages",
                                "ec2messages:SendReply",
                                "cloudwatch:PutMetricData",
                                "ec2:AssociateAddress",
                                "ec2:DescribeAddresses",
                                "ec2:DescribeInstanceStatus",
                                "ec2:TerminateInstances",
                                "ds:CreateComputer",
                                "ds:DescribeDirectories",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents",
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:AbortMultipartUpload",
                                "s3:ListMultipartUploadParts",
                                "s3:ListBucket",
                                "s3:ListBucketMultipartUploads"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole

    ECSServiceAutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    Action:
                    - 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service:
                        - application-autoscaling.amazonaws.com
            Path: /
            Policies:
            - PolicyName: ecs-service-autoscaling
              PolicyDocument:
                  Statement:
                      Effect: Allow
                      Action:
                      - application-autoscaling:*
                      - cloudwatch:DescribeAlarms
                      - cloudwatch:PutMetricAlarm
                      - ecs:DescribeServices
                      - ecs:UpdateService
                      Resource: "*"

    EFSSGIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            GroupId:
              Fn::ImportValue: !Ref EFSSecurityGroup
            FromPort: 2049
            ToPort: 2049
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref SecurityGroup
            Description: Allow traffic from ECS

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

    ECSServiceAutoScalingRole:
        Description: A reference to ECS service auto scaling role
        Value: !GetAtt ECSServiceAutoScalingRole.Arn

    ECSAutoScalingGroupName:
        Description: A reference to ECS AutoScaling Group Name
        Value: !Ref ECSAutoScalingGroup
